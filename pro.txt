import { Composer, Markup } from 'telegraf';
import type { CustomContext } from '../middlewares/userAuth';
import { changeUserField } from './economy';
import { escapeMarkdownV2 } from '../utils/escape';
import { getCountryByName, getAvailableCountriesList } from '../utils/countryUtils';
import { prisma } from '../prisma';
import config from '../config/config.json';

const business = new Composer<CustomContext>();

const transferableFields = ['iron', 'gold', 'oil', 'uranium', 'capital', 'soldier', 'tank', 'plane', 'ship', 'missile', 'nuclear', 'satellite', 'spies', 'agents'];

// لیست کشورها برای انتخاب مقصد
function loadAvailableCountries() {
    try {
        // استفاده از لیست کشور‌های موجود در بازی
        const availableCountries = getAvailableCountriesList('').map(country => country.name);
        return availableCountries.length > 0 ? availableCountries : [
            'ایران 🇮🇷', 'چین 🇨🇳', 'روسیه 🇷🇺', 'آمریکا 🇺🇸', 'انگلیس 🇬🇧',
            'فرانسه 🇫🇷', 'آلمان 🇩🇪', 'ژاپن 🇯🇵', 'هند 🇮🇳', 'ترکیه 🇹🇷'
        ];
    } catch (error) {
        // fallback به لیست ثابت
        return [
            'ایران 🇮🇷', 'چین 🇨🇳', 'روسیه 🇷🇺', 'آمریکا 🇺🇸', 'انگلیس 🇬🇧',
            'فرانسه 🇫🇷', 'آلمان 🇩🇪', 'ژاپن 🇯🇵', 'هند 🇮🇳', 'ترکیه 🇹🇷'
        ];
    }
}

business.action('business', async (ctx) => {
    const user = ctx.user;

    // چک کردن منابع کافی
    const hasResources = transferableFields.some(field => user[field] > 0);
    if (!hasResources) {
        return ctx.reply('❌ شما هیچ منبعی برای تجارت ندارید.');
    }

    // ریست کردن session برای شروع تجارت جدید
    ctx.session.tradeStep = 'select_destination';
    ctx.session.tradeItems = [];
    ctx.session.tradeOilCost = 0;

    // نمایش لیست کشورها برای انتخاب مقصد
    const countries = loadAvailableCountries();
    const countryButtons = countries.map(country =>
        Markup.button.callback(country, `select_country_${country.replace(/[^a-zA-Z0-9]/g, '_')}`)
    );

    countryButtons.push(Markup.button.callback('❌ انصراف', 'cancel_trade'));

    await ctx.reply('<b>🌍 انتخاب کشور مقصد برای تجارت:</b>', {
        reply_markup: Markup.inlineKeyboard(countryButtons, { columns: 2 }).reply_markup,
        parse_mode: 'HTML'
    });
});

// هندلر انتخاب کشور مقصد
loadAvailableCountries().forEach(countryName => {
    const callbackData = `select_country_${countryName.replace(/[^a-zA-Z0-9]/g, '_')}`;
    business.action(callbackData, async (ctx) => {
        const user = ctx.user;
        ctx.session.destinationCountry = countryName;
        ctx.session.tradeStep = 'select_items';

        await ctx.reply(`✅ کشور مقصد: ${countryName}\n\n📦 حالا آیتم‌هایی که می‌خواهید ارسال کنید انتخاب کنید:`, {
            parse_mode: 'HTML'
        });

        // نمایش آیتم‌های قابل انتقال
        await showTradeItemsKeyboard(ctx);
    });
});

// تابع نمایش کیبورد آیتم‌های قابل انتقال
async function showTradeItemsKeyboard(ctx: CustomContext) {
    const user = ctx.user;
    const buttons = transferableFields
        .filter(field => user[field] > 0)
        .map(field => Markup.button.callback(`${field} (${user[field]})`, `select_item_${field}`));

    // اضافه کردن دکمه تأیید و ارسال
    if (ctx.session.tradeItems && ctx.session.tradeItems.length > 0) {
        buttons.push(Markup.button.callback('✅ تأیید و ارسال', 'confirm_trade'));
    }

    // اضافه کردن دکمه لغو
    buttons.push(Markup.button.callback('❌ انصراف', 'cancel_trade'));

    if (buttons.length === 0) {
        return ctx.reply('❌ شما هیچ آیتمی برای ارسال ندارید.');
    }

    await ctx.reply('📦 انتخاب آیتم برای ارسال:', {
        reply_markup: Markup.inlineKeyboard(buttons, { columns: 2 }).reply_markup,
        parse_mode: 'HTML'
    });
}

// هندلر انتخاب آیتم‌ها
for (const field of transferableFields) {
    business.action(`select_item_${field}`, async (ctx) => {
        if (ctx.session.tradeStep !== 'select_items') return;

        ctx.session.selectedItem = field;
        ctx.session.tradeStep = 'awaiting_quantity';
        await ctx.reply(`🔢 چند واحد ${field} می‌خواهید ارسال کنید؟ (حداکثر: ${ctx.user[field]})`, {
            parse_mode: 'HTML'
        });
    });
}
business.on('text', async (ctx, next) => {
    if (ctx.session.tradeStep === 'awaiting_quantity') {
        const amount = parseInt(ctx.message.text.trim());
        const field = ctx.session.selectedItem;
        const user = ctx.user;

        if (!amount || amount <= 0 || amount > user[field]) {
            return ctx.reply(`❌ مقدار نامعتبر یا بیشتر از موجودی شما (${user[field]}).`, {
                parse_mode: 'HTML'
            });
        }

        // اضافه کردن آیتم به لیست (هنوز کسر نمی‌کنیم)
        ctx.session.tradeItems.push({ type: field, amount });
        ctx.session.tradeStep = 'select_items';
        ctx.session.selectedItem = null;

        await ctx.reply(`✅ ${amount} واحد ${field} ثبت شد.\n\n📦 آیتم دیگری انتخاب کنید یا دکمه "✅ تأیید و ارسال" را بزنید.`, {
            parse_mode: 'HTML'
        });

        // نمایش دوباره کیبورد
        await showTradeItemsKeyboard(ctx);
        return;
    }

    return next();
});

// هندلر تأیید نهایی تجارت
business.action('confirm_trade', async (ctx) => {
    if (ctx.session.tradeStep !== 'select_items' || !ctx.session.tradeItems || ctx.session.tradeItems.length === 0) {
        return ctx.reply('❌ هیچ آیتمی برای ارسال انتخاب نکرده‌اید.');
    }

    const user = ctx.user;
    const items = ctx.session.tradeItems;
    const destination = ctx.session.destinationCountry;

    // محاسبه هزینه نفت (پردازش تجارت)
    const oilCost = Math.floor(Math.random() * (60 - 35 + 1)) + 35;

    if (user.oil < oilCost) {
        return ctx.reply(`❌ نفت کافی برای پردازش تجارت ندارید. نیاز: ${oilCost} نفت`);
    }

    // ذخیره هزینه نفت برای استفاده بعد
    ctx.session.tradeOilCost = oilCost;
    ctx.session.tradeStep = 'awaiting_trade_cost';

    // پرسیدن هزینه تجارت از کاربر
    await ctx.reply(`💰 چه هزینه‌ای می‌خواهید از کشور ${destination} دریافت کنید؟\n\n📦 محموله‌های شما:\n${items.map((item, index) => `${index + 1}. ${item.amount} واحد ${item.type}`).join('\n')}\n\n💸 هزینه پردازش: ${oilCost} نفت`, {
        reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('💰 رایگان', 'set_trade_cost_0')],
            [Markup.button.callback('💎 1000 طلا', 'set_trade_cost_1000_gold')],
            [Markup.button.callback('💵 50000 پول', 'set_trade_cost_50000_capital')],
            [Markup.button.callback('❌ انصراف', 'cancel_trade')]
        ]).reply_markup,
        parse_mode: 'HTML'
    });
});

// هندلر تنظیم هزینه تجارت
business.action(/^set_trade_cost_(\d+)_(\w+)$/, async (ctx) => {
    const match = ctx.match;
    const amount = parseInt(match[1]);
    const unit = match[2];

    ctx.session.tradeCost = { amount, unit };
    ctx.session.tradeStep = 'send_confirmation_to_destination';

    await sendTradeConfirmationToDestination(ctx);
});

business.action('set_trade_cost_0', async (ctx) => {
    ctx.session.tradeCost = { amount: 0, unit: 'free' };
    ctx.session.tradeStep = 'send_confirmation_to_destination';

    await sendTradeConfirmationToDestination(ctx);
});

// تابع ارسال تأیید به کشور مقصد
async function sendTradeConfirmationToDestination(ctx: CustomContext) {
    const user = ctx.user;
    const items = ctx.session.tradeItems;
    const destination = ctx.session.destinationCountry;
    const tradeCost = ctx.session.tradeCost;
    const oilCost = ctx.session.tradeOilCost;

    // پیدا کردن کاربران کشور مقصد
    const destinationUsers = await prisma.user.findMany({
        where: { countryName: destination },
        select: { userid: true, countryName: true }
    });

    if (destinationUsers.length === 0) {
        return ctx.reply('❌ کشور مقصد یافت نشد یا کاربرانی ندارد.');
    }

    // ارسال درخواست به همه کاربران کشور مقصد
    let confirmationsSent = 0;
    for (const destUser of destinationUsers) {
        try {
            const tradeId = `trade_${user.userid}_${destUser.userid}_${Date.now()}`;

            let costText = '';
            if (tradeCost.amount === 0) {
                costText = 'رایگان';
            } else {
                costText = `${tradeCost.amount} ${tradeCost.unit}`;
            }

            const message = `<b>📦 درخواست تجارت دریافتی</b>\n\n` +
                `<b>از کشور:</b> ${user.countryName}\n` +
                `<b>هزینه پیشنهادی:</b> ${costText}\n\n` +
                `<b>محموله‌ها:</b>\n${items.map((item, index) => `${index + 1}. ${item.amount} واحد ${item.type}`).join('\n')}\n\n` +
                `<b>⚠️ آیا این تجارت را قبول دارید؟</b>`;

            await ctx.telegram.sendMessage(Number(destUser.userid), message, {
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback(`✅ قبول - ${tradeId}`, `accept_trade_${tradeId}`)],
                    [Markup.button.callback(`❌ رد - ${tradeId}`, `reject_trade_${tradeId}`)]
                ]).reply_markup,
                parse_mode: 'HTML'
            });

            confirmationsSent++;
        } catch (error) {
            console.log(`Failed to send to user ${destUser.userid}:`, error);
        }
    }

    if (confirmationsSent > 0) {
        await ctx.reply(`✅ درخواست تجارت به ${confirmationsSent} کاربر از کشور ${destination} ارسال شد.\n\n⏳ منتظر پاسخ آنها باشید...`, {
            parse_mode: 'HTML'
        });
    } else {
        await ctx.reply('❌ نتوانستم درخواست را ارسال کنم.');
    }
}

// هندلر قبول تجارت توسط کشور مقصد
business.action(/^accept_trade_(trade_\d+_\d+_\d+)$/, async (ctx) => {
    const tradeId = ctx.match[1];
    const accepterId = ctx.from.id;

    // استخراج اطلاعات از tradeId
    const parts = tradeId.split('_');
    const senderId = BigInt(parts[1]);
    const receiverId = BigInt(parts[2]);

    // بررسی اینکه آیا این کاربر مجاز به قبول است
    if (receiverId !== BigInt(accepterId)) {
        return ctx.reply('❌ شما مجاز به قبول این تجارت نیستید.');
    }

    // پیدا کردن اطلاعات تجارت از دیتابیس یا session (اینجا از session فرض می‌کنیم)
    // در عمل باید از دیتابیس استفاده کنید
    const senderUser = await prisma.user.findUnique({ where: { userid: senderId } });
    if (!senderUser) return ctx.reply('❌ کاربر ارسال‌کننده یافت نشد.');

    try {
        // ارسال تأیید به ارسال‌کننده
        await ctx.telegram.sendMessage(Number(senderId), `✅ کشور ${ctx.user.countryName} تجارت شما را قبول کرد!\n\n🚚 ارسال محموله‌ها آغاز می‌شود...`);

        // اجرای تجارت
        await executeTrade(ctx, senderId, receiverId);
    } catch (error) {
        console.log('Trade execution error:', error);
        await ctx.reply('❌ خطا در اجرای تجارت.');
    }
});

// هندلر رد تجارت
business.action(/^reject_trade_(trade_\d+_\d+_\d+)$/, async (ctx) => {
    const tradeId = ctx.match[1];
    const rejecterId = ctx.from.id;

    const parts = tradeId.split('_');
    const senderId = BigInt(parts[1]);

    try {
        await ctx.telegram.sendMessage(Number(senderId), `❌ کشور ${ctx.user.countryName} تجارت شما را رد کرد.`);
        await ctx.reply('❌ تجارت رد شد.');
    } catch (error) {
        console.log('Trade rejection error:', error);
    }
});

// تابع اجرای تجارت
async function executeTrade(ctx: CustomContext, senderId: bigint, receiverId: bigint) {
    const items = ctx.session.tradeItems;
    const tradeCost = ctx.session.tradeCost;
    const oilCost = ctx.session.tradeOilCost;

    // کسر منابع از ارسال‌کننده
    for (const item of items) {
        await changeUserField(senderId, item.type, 'subtract', item.amount);
    }
    await changeUserField(senderId, 'oil', 'subtract', oilCost);

    // اضافه کردن منابع به دریافت‌کننده
    for (const item of items) {
        await changeUserField(receiverId, item.type, 'add', item.amount);
    }

    // اگر هزینه وجود دارد، کسر از دریافت‌کننده و اضافه به ارسال‌کننده
    if (tradeCost.amount > 0) {
        await changeUserField(receiverId, tradeCost.unit, 'subtract', tradeCost.amount);
        await changeUserField(senderId, tradeCost.unit, 'add', tradeCost.amount);
    }

    // ارسال محموله‌ها
    await deliverTradeItems(ctx, receiverId);

    // پاک کردن session
    ctx.session.tradeStep = null;
    ctx.session.tradeItems = [];
    ctx.session.destinationCountry = null;
    ctx.session.tradeCost = null;
    ctx.session.tradeOilCost = 0;
}

// هندلر انصراف (فقط ریست session، کیبورد می‌مونه برای استفاده مجدد)
business.action('cancel_trade', async (ctx) => {
    ctx.session.tradeStep = null;
    ctx.session.tradeItems = [];
    ctx.session.destinationCountry = null;
    ctx.session.tradeOilCost = 0;
    await ctx.reply('❌ تجارت لغو شد.', {
        parse_mode: 'HTML'
    });
});

async function deliverTradeItems(ctx: CustomContext, receiverId: bigint) {
    const senderUser = ctx.user;
    const items = ctx.session.tradeItems ?? [];

    for (const item of items) {
        const { type, amount } = item;
        const userId = Number(receiverId);
        const delay = Math.floor(Math.random() * (180 - 120 + 1)) + 120;

        setTimeout(async () => {
            await changeUserField(BigInt(userId), type, 'add', amount);
            await ctx.telegram.sendMessage(userId, `📦 محموله ${amount} واحد ${type} تحویل شد.`);
        }, delay * 1000);
    }

    const country = getCountryByName(senderUser.countryName);
    const countryText = country?.name ?? senderUser.countryName;

    const newsTemplates = [
        `خبر فوری - تجاری ♨️ طبق گزارش خبر نگاران کشور ${countryText} تجارت جدیدی داشت.\n↔️ محموله‌ها سالم تحویل شدند.\n✅ گمان‌هایی بر انتقال تسلیحات نظامی وجود دارد. ⁉️`,
        `خبر فوری - تجاری ♨️ طبق گزارش خبر نگاران کشور ${countryText} تجارت جدیدی داشت.\n↔️ محموله‌ها سالم تحویل شدند.\n✅ گمان‌هایی بر انتقال سرمایه رایج وجود دارد. ⁉️`
    ];

    const selectedNews = newsTemplates[Math.floor(Math.random() * newsTemplates.length)];
    await ctx.telegram.sendMessage(config.channels.business, escapeMarkdownV2(selectedNews), {
        parse_mode: 'MarkdownV2'
    });
}

export default business;



1. har trade bayad yek maghsad dashte bashad
2. mikham kkhodet kamelesh koni
3. marahele kamele injorie : user type tejarat ro entekhab mikone ( felan faghat yek tarafe hast ) , check mishe ke oil kafi ro dashte bashe , mahmole ha va meghdareshon ro az ferestande migire , maghsad ro ba estefade az inlinekeyboard moshakhas mikone , yek payam ba detail transform ke maghsad o mahmole ha brash mire o montazer taiid mimone , agar taiid shod oil maliat va mahmole ha kam mishe , dar baze 2-3 min be maghsad add mishe o payam mire be channel
4. mikham user dar marahele avalie ke entekhab maghsad o mahmole hast betone cancel kone