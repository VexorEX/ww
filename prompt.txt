import { Composer, Markup } from 'telegraf';
import type { CustomContext } from '../../middlewares/userAuth';
import { prisma } from '../../prisma';
import { assetCategories , bigintFields } from '../../constants/assetCategories';
import { calculateNewValue } from "../helper/calculate";

const editAsset = new Composer<CustomContext>();

const cancelBtn = Markup.inlineKeyboard([
    [Markup.button.callback('❌ لغو', 'cancel_edit')]
])


editAsset.on('text', async (ctx, next) => {
    ctx.session ??= {};
    const valueStr = ctx.message.text?.trim();

    // مرحله دریافت شناسه کاربر
    if (ctx.session.editStep === 'awaiting_user_id') {
        if (!/^\d+$/.test(valueStr)) return ctx.reply('❌ شناسه معتبر نیست.');
        ctx.session.editUserId = BigInt(valueStr);
        ctx.session.editStep = 'awaiting_category';

        const keyboard = Markup.inlineKeyboard([
            ...Object.entries(assetCategories).map(([key]) => [
                Markup.button.callback(`📦 ${key}`, `edit_cat_${key}`)
            ]),
            [Markup.button.callback('❌ لغو', 'cancel_edit')]
        ]);

        await ctx.reply('🔧 دسته دارایی را انتخاب کن:', keyboard);
        return;
    }

    // مرحله دریافت مقدار برای یک کاربر
    if (ctx.session.editStep === 'awaiting_value') {
        const value = Number(valueStr);

        if (isNaN(value)) return ctx.reply('❌ مقدار عددی معتبر نیست.');

        const { editUserId, editItem } = ctx.session;
        if (!editUserId || !editItem) return ctx.reply('❌ اطلاعات ناقص است.');

        const user = await prisma.user.findUnique({ where: { userid: editUserId } });
        if (!user) return ctx.reply('❌ کاربر یافت نشد.');

        const isBigInt = bigintFields.includes(editItem);
        const current = isBigInt ? BigInt(user[editItem] || 0) : Number(user[editItem] || 0);
        const newValue = calculateNewValue(current, valueStr, isBigInt);

        await prisma.user.update({
            where: { userid: editUserId },
            data: { [editItem]: newValue }
        });

        await ctx.reply(`✅ مقدار جدید ${editItem} برای کاربر ${editUserId} تنظیم شد: ${newValue.toLocaleString()}`);
        ctx.session.editStep = undefined;

    }

    // مرحله دریافت مقدار برای همه کاربران
    if (ctx.session.editStep === 'awaiting_value_all') {
        const valueStr = ctx.message.text?.trim();
        const valueNum = Number(valueStr?.replace(/[+-]/, ''));
        if (isNaN(valueNum)) return ctx.reply('❌ مقدار عددی معتبر نیست.');

        const { editItem } = ctx.session;
        const isBigInt = bigintFields.includes(editItem);
        const users = await prisma.user.findMany({ select: { userid: true, [editItem]: true } });

        for (const user of users) {
            if (isBigInt) {
                const current = BigInt(user[editItem] || 0);
                const typedValue = BigInt(valueNum);

                let newValue = valueStr.startsWith('+') ? current + typedValue
                    : valueStr.startsWith('-') ? current - typedValue
                        : BigInt(valueStr);

                if (newValue < BigInt(0)) newValue = BigInt(0);

                await prisma.user.update({
                    where: { userid: user.userid },
                    data: { [editItem]: newValue }
                });
            } else {
                const current = Number(user[editItem] || 0);
                const typedValue = valueNum;

                let newValue = valueStr.startsWith('+') ? current + typedValue
                    : valueStr.startsWith('-') ? current - typedValue
                        : Number(valueStr);

                if (newValue < 0) newValue = 0;

                await prisma.user.update({
                    where: { userid: user.userid },
                    data: { [editItem]: newValue }
                });
            }
        }

        await ctx.reply(`✅ مقدار جدید ${editItem} برای همه کاربران اعمال شد.`);
        ctx.session.editStep = undefined;
        return;
    }

    console.log('🔥 text received:', ctx.message.text);
    await ctx.reply('متن دریافت شد.');
    return next();
});

//
// ✅ ویرایش دارایی با /editasset
//
editAsset.action('admin_editAsset', async (ctx) => {
    ctx.session ??= {};
    ctx.session.editStep = 'awaiting_user_id';

    await ctx.reply('📌 لطفاً شناسه کاربر را وارد کن:\nمثال: 7588477963');
    ctx.answerCbQuery();
});
editAsset.action(/^edit_cat_(\w+)$/, async (ctx) => {
    ctx.session ??= {};
    const category = ctx.match[1];
    const items = assetCategories[category];
    if (!items) return ctx.answerCbQuery('❌ دسته نامعتبر است.');

    ctx.session.editCategory = category;

    const keyboard = Markup.inlineKeyboard([
        ...items.map((item) => [Markup.button.callback(item, `edit_item_${item}`)]),
        [Markup.button.callback('❌ لغو', 'cancel_edit')]
    ]);


    try {
        await ctx.editMessageText('🔍 موردی که می‌خواهی ویرایش کنی را انتخاب کن:', keyboard);
    } catch (err) {
        console.error('❌ خطا در editMessageText:', err);
        await ctx.reply('❌ خطا در ویرایش پیام. لطفاً دوباره تلاش کن.');
    }

    ctx.answerCbQuery();
});
editAsset.action(/^edit_item_(\w+)$/, async (ctx) => {
    ctx.session ??= {};
    ctx.session.editItem = ctx.match[1];
    ctx.session.editStep = 'awaiting_value';
    await ctx.reply('✏️ مقدار جدید را وارد کن:\n+25 برای افزایش، -25 برای کاهش، 25 برای مقدار مستقیم', cancelBtn);
    ctx.answerCbQuery();
});


editAsset.action('admin_editAssetAll', async (ctx) => {
    ctx.session ??= {};
    ctx.session.editStep = 'awaiting_category_all';

    const keyboard = Markup.inlineKeyboard([
        ...Object.entries(assetCategories).map(([key]) => [
            Markup.button.callback(`📦 ${key}`, `edit_all_cat_${key}`)
        ]),
        [Markup.button.callback('❌ لغو', 'cancel_edit')]
    ]);


    await ctx.reply('📊 دسته دارایی را برای ویرایش گروهی انتخاب کن:', keyboard);
    ctx.answerCbQuery();
});
editAsset.action(/^edit_all_cat_(\w+)$/, async (ctx) => {
    ctx.session ??= {};
    const category = ctx.match[1];
    const items = assetCategories[category];
    if (!items) return ctx.answerCbQuery('❌ دسته نامعتبر است.');

    ctx.session.editCategory = category;

    const keyboard = Markup.inlineKeyboard([
        ...items.map((item) => [Markup.button.callback(item, `edit_all_item_${item}`)]),
        [Markup.button.callback('❌ لغو', 'cancel_edit')]
    ]);


    try {
        await ctx.editMessageText('🔍 موردی که می‌خواهی برای همه ویرایش کنی را انتخاب کن:', keyboard);
    } catch (err) {
        console.error('❌ خطا در editMessageText:', err);
        await ctx.reply('❌ خطا در ویرایش پیام. لطفاً دوباره تلاش کن.');
    }

    ctx.answerCbQuery();
});
editAsset.action(/^edit_all_item_(\w+)$/, async (ctx) => {
    ctx.session ??= {};
    ctx.session.editItem = ctx.match[1];
    ctx.session.editStep = 'awaiting_value_all';

    await ctx.reply('✏️ مقدار جدید را وارد کن:\n+25 برای افزایش، -25 برای کاهش، 25 برای مقدار مستقیم',cancelBtn);
    ctx.answerCbQuery();
});

editAsset.action('cancel_edit', async (ctx) => {
    ctx.session.editStep = undefined;
    await ctx.editMessageText('❌ عملیات ویرایش لغو شد.',{});
    ctx.answerCbQuery();
});


export default editAsset;


in ro mikham update koni va az utils amade estefade koni:

import { Composer } from 'telegraf';
import { prisma } from '../prisma';
import type { CustomContext } from '../middlewares/userAuth';

const economy = new Composer<CustomContext>();

type Operation =
    | 'add'
    | 'subtract'
    | 'multiply'
    | 'divide'
    | 'mod'
    | 'power'
    | 'floor'
    | 'ceil'
    | 'round'
    | 'sqrt'
    | 'set';

export async function changeCapital(
    userid: bigint,
    operation: Operation,
    value: number
): Promise<'ok' | 'not_found' | 'invalid' | 'error'> {
    try {
        const user = await prisma.user.findUnique({ where: { userid } });
        if (!user) return 'not_found';

        let result = user.capital;

        switch (operation) {
            case 'add':
                result += BigInt(value);
                break;
            case 'subtract':
                result -= BigInt(value);
                break;
            case 'multiply':
                result *= BigInt(value);
                break;
            case 'divide':
                if (value === 0) return 'invalid';
                result /= BigInt(value);
                break;
            case 'mod':
                result %= BigInt(value);
                break;
            case 'power':
                result = BigInt(Math.pow(Number(result), value));
                break;
            case 'floor':
                result = BigInt(Math.floor(Number(result)));
                break;
            case 'ceil':
                result = BigInt(Math.ceil(Number(result)));
                break;
            case 'round':
                result = BigInt(Math.round(Number(result)));
                break;
            case 'sqrt':
                result = BigInt(Math.floor(Math.sqrt(Number(result))));
                break;
            case 'set':
                result = BigInt(value);
                break;
            default:
                return 'invalid';
        }


        await prisma.user.update({
            where: { userid },
            data: { capital: BigInt(result) }
        });

        return 'ok';
    } catch (err) {
        console.error('❌ changeCapital error:', err);
        return 'error';
    }
}

const bigintFields = ['capital', 'dailyProfit', 'crowd', 'iron', 'gold', 'oil', 'uranium']; // قابل گسترش

export async function changeUserField(
    userid: bigint,
    field: any,
    operation: Operation,
    value: number
): Promise<'ok' | 'not_found' | 'invalid' | 'error'> {
    try {
        const user = await prisma.user.findUnique({ where: { userid } });
        if (!user) return 'not_found';

        const isBigInt = bigintFields.includes(field);
        let current: number | bigint = user[field] ?? (isBigInt ? BigInt(0) : 0);


        if (current === null || current === undefined) current = isBigInt ? BigInt(0) : 0;

        let result: number | bigint;
        result = result < (isBigInt ? BigInt(0) : 0) ? (isBigInt ? BigInt(0) : 0) : result;


        if (isBigInt) {
            let val = BigInt(value);
            let cur = BigInt(current);
            switch (operation) {
                case 'add': result = cur + val; break;
                case 'subtract': result = cur - val; break;
                case 'multiply': result = cur * val; break;
                case 'divide': if (value === 0) return 'invalid'; result = cur / val; break;
                case 'mod': result = cur % val; break;
                case 'power': result = BigInt(Math.pow(Number(cur), value)); break;
                case 'floor': result = BigInt(Math.floor(Number(cur))); break;
                case 'ceil': result = BigInt(Math.ceil(Number(cur))); break;
                case 'round': result = BigInt(Math.round(Number(cur))); break;
                case 'sqrt': result = BigInt(Math.floor(Math.sqrt(Number(cur)))); break;
                case 'set': result = val; break;
                default: return 'invalid';
            }
        } else {
            let cur = Number(current);
            switch (operation) {
                case 'add': result = cur + value; break;
                case 'subtract': result = cur - value; break;
                case 'multiply': result = cur * value; break;
                case 'divide': if (value === 0) return 'invalid'; result = cur / value; break;
                case 'mod': result = cur % value; break;
                case 'power': result = Math.pow(cur, value); break;
                case 'floor': result = Math.floor(cur); break;
                case 'ceil': result = Math.ceil(cur); break;
                case 'round': result = Math.round(cur); break;
                case 'sqrt': result = Math.floor(Math.sqrt(cur)); break;
                case 'set': result = value; break;
                default: return 'invalid';
            }
        }

        await prisma.user.update({
            where: { userid },
            data: { [field]: isBigInt ? BigInt(result) : Number(result) }
        });

        return 'ok';
    } catch (err) {
        console.error(`❌ changeUserField error on ${field}:`, err);
        return 'error';
    }
}

export async function changeFieldForAllUsers(
    field: string,
    operation: Operation,
    value: number
): Promise<'ok' | 'invalid' | 'error'> {
    try {
        const users = await prisma.user.findMany({ select: { userid: true, [field]: true } });
        const isBigInt = bigintFields.includes(field);

        for (const user of users) {
            let current: number | bigint = user[field] ?? (isBigInt ? BigInt(0) : 0);

            if (current === null || current === undefined) current = isBigInt ? BigInt(0) : 0;

            let result: number | bigint;
            result = result < (isBigInt ? BigInt(0) : 0) ? (isBigInt ? BigInt(0) : 0) : result;

            if (isBigInt) {
                const val = BigInt(value);
                const cur = BigInt(current);
                switch (operation) {
                    case 'add': result = cur + val; break;
                    case 'subtract': result = cur - val; break;
                    case 'multiply': result = cur * val; break;
                    case 'divide': if (value === 0) return 'invalid'; result = cur / val; break;
                    case 'mod': result = cur % val; break;
                    case 'power': result = BigInt(Math.pow(Number(cur), value)); break;
                    case 'floor': result = BigInt(Math.floor(Number(cur))); break;
                    case 'ceil': result = BigInt(Math.ceil(Number(cur))); break;
                    case 'round': result = BigInt(Math.round(Number(cur))); break;
                    case 'sqrt': result = BigInt(Math.floor(Math.sqrt(Number(cur)))); break;
                    case 'set': result = val; break;
                    default: return 'invalid';
                }
            } else {
                const cur = Number(current);
                switch (operation) {
                    case 'add': result = cur + value; break;
                    case 'subtract': result = cur - value; break;
                    case 'multiply': result = cur * value; break;
                    case 'divide': if (value === 0) return 'invalid'; result = cur / value; break;
                    case 'mod': result = cur % value; break;
                    case 'power': result = Math.pow(cur, value); break;
                    case 'floor': result = Math.floor(cur); break;
                    case 'ceil': result = Math.ceil(cur); break;
                    case 'round': result = Math.round(cur); break;
                    case 'sqrt': result = Math.floor(Math.sqrt(cur)); break;
                    case 'set': result = value; break;
                    default: return 'invalid';
                }
            }

            await prisma.user.update({
                where: { userid: user.userid },
                data: { [field]: isBigInt ? BigInt(result) : Number(result) }
            });

        }

        return 'ok';
    } catch (err) {
        console.error(`❌ changeFieldForAllUsers error on ${field}:`, err);
        return 'error';
    }
}


export default economy;


az in util ha estefade kon ham braye unit user hast ham braye all user